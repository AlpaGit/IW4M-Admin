@model IEnumerable<SharedLibraryCore.Dtos.ProfileMeta>
@{
    Layout = null;

    var timeSinceLastEvent = DateTime.MinValue;

    string formatPenalty(SharedLibraryCore.Dtos.ProfileMeta meta)
    {
        var penalty = meta.Value as SharedLibraryCore.Dtos.PenaltyInfo;

        string localizationKey = meta.Type == SharedLibraryCore.Dtos.ProfileMeta.MetaType.Penalized ?
            $"WEBFRONT_CLIENT_META_PENALIZED_{penalty.PenaltyTypeText.ToUpper()}" :
            $"WEBFRONT_CLIENT_META_WAS_PENALIZED_{penalty.PenaltyTypeText.ToUpper()}";

        string localizationMessage = SharedLibraryCore.Utilities.CurrentLocalization.LocalizationIndex[localizationKey];
        var regexMatch = System.Text.RegularExpressions.Regex.Match(localizationMessage, @"^.*{{([^{}]+)}}.+$");
        string penaltyType = regexMatch.Groups[1].Value.ToString();

        localizationMessage = localizationMessage.Replace(penaltyType, $"<span class='penalties-color-{penalty.PenaltyTypeText.ToLower()}'>{penaltyType}</span>");

        return meta.Type == SharedLibraryCore.Dtos.ProfileMeta.MetaType.Penalized ?
            string.Format(localizationMessage,
            $"<span class='text-highlight'><a class='link-inverse' href='{penalty.OffenderId}'>{penalty.OffenderName}</a></span>",
            $"<span class='{(ViewBag.Authorized ? "automated-penalty-info-detailed" : "")} text-white' data-penalty-id='{penalty.Id}'>{penalty.Offense} {(ViewBag.Authorized ? penalty.AdditionalPenaltyInformation : "")}</span>")
            .Replace("{", "")
            .Replace("}", "") :
            string.Format(localizationMessage,
            $"<span class='text-highlight'><a class='link-inverse' href='{penalty.PunisherId}'>{penalty.PunisherName}</a></span>",
            $"<span class='{(ViewBag.Authorized ? "automated-penalty-info-detailed" : "")} text-white' data-penalty-id='{penalty.Id}'>{penalty.Offense} {(ViewBag.Authorized ? penalty.AdditionalPenaltyInformation : "")}</span>",
            penalty.Offense)
            .Replace("{", "")
            .Replace("}", "");
    }
}

@if (Model.Count() == 0)
{
    <div class="p2 text-muted profile-event-timestep">@SharedLibraryCore.Utilities.CurrentLocalization.LocalizationIndex["WEBFRONT_CLIENT_META_NONE"]</div>
}

@foreach (var meta in Model.OrderByDescending(_meta => _meta.When))
{
    @if (Math.Abs((meta.When - timeSinceLastEvent).TotalDays) >= 1)
    {
        <div class="p2 text-white profile-event-timestep">
            <span class="text-primary">&mdash;</span>
            <span>@SharedLibraryCore.Utilities.GetTimePassed(meta.When, true)</span>
        </div>

        timeSinceLastEvent = meta.When;
    }

    @switch (meta.Type)
    {
        case SharedLibraryCore.Dtos.ProfileMeta.MetaType.ChatMessage:
        case SharedLibraryCore.Dtos.ProfileMeta.MetaType.QuickMessage:
            <div class="profile-meta-entry loader-data-time" data-time="@meta.When">
                <span style="color:white;">></span>
                <span class="client-message text-muted @(meta.Type == SharedLibraryCore.Dtos.ProfileMeta.MetaType.QuickMessage ? "font-italic" : "")" data-serverid="@meta.Extra" data-when="@meta.When.ToFileTimeUtc()" title="@SharedLibraryCore.Utilities.CurrentLocalization.LocalizationIndex["WEBFRONT_PROFILE_MESSAGE_CONTEXT"]"> <color-code value="@meta.Value" allow="@ViewBag.EnableColorCodes"></color-code></span>
            </div>
            break;
        case SharedLibraryCore.Dtos.ProfileMeta.MetaType.ReceivedPenalty:
        case SharedLibraryCore.Dtos.ProfileMeta.MetaType.Penalized:
            <div class="profile-meta-entry loader-data-time" data-time="@meta.When"><color-code value="@Html.Raw(formatPenalty(meta))" allow="@ViewBag.EnableColorCodes"></color-code></div>
            break;
    }
}